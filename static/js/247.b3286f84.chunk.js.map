{"version":3,"file":"static/js/247.b3286f84.chunk.js","mappings":"mTAEMA,EAAW,gDACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gFACCC,EADD,UACUJ,EADV,oBAC8BC,GAD9B,SAEkBI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFtD,cAECC,EAFD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA6BC,EAAQR,GAArC,gFACCC,EADD,0DAC0DO,EAD1D,oBAC4EV,EAD5E,uDAEcI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFlD,cAECE,EAFD,yBAGEA,EAAKA,KAAKC,SAHZ,kEAKA,SAAeG,EAAtB,iDAAO,OAAP,oBAAO,WAAyBC,EAAUV,GAAnC,gFACCC,EADD,6CAC6CS,EAD7C,oBACiEZ,EADjE,4BAEcI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFlD,cAECE,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeM,EAAtB,iDAAO,OAAP,oBAAO,WAAgCD,EAAUV,GAA1C,gFACCC,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,4BAEcI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFlD,cAECE,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeO,EAAtB,iDAAO,OAAP,oBAAO,WAAgCF,EAAUV,GAA1C,gFACCC,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,mCAEcI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFlD,cAECE,EAFD,yBAGEA,EAAKA,MAHP,kE,oICuCP,UA7Da,WACX,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMtB,EAAa,IAAIuB,gBADT,wCAEd,2FACEF,GAAa,GADf,SAGIF,EAAS,MAHb,UAIuBR,EAAAA,EAAAA,IAAiBE,EAASb,GAJjD,UAK6B,KADnBK,EAJV,QAKaW,KAAKQ,OALlB,uBAMMP,EAAQ,MANd,0BASIA,EAAQZ,GATZ,kDAWQ,KAAMD,WACRe,EAAS,EAAD,IACRM,EAAAA,GAAAA,MAAY,KAAMrB,SAASC,KAAKqB,iBAbtC,yBAgBIL,GAAa,GAhBjB,8EAFc,sBAsBd,OAtBc,mCAqBdM,GACO,WACL3B,EAAW4B,OACZ,CACF,GAAE,CAACf,KAEF,iCACE,SAAC,IAAD,CAAQO,UAAWA,IAClBF,IAAS,wBAAKA,EAAMd,SAASC,KAAKqB,iBACzB,OAATV,GACC,2CAEA,wBACGA,EAAKA,KAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACb,2BACE,gBACEC,IACmB,OAAjBH,EAAA,6CAC0CA,GAD1C,2FAIFI,IAAKH,EACLI,MAAM,SAER,uBAAIJ,KACJ,uCAAeC,OAXRH,EADI,QAmBxB,C","sources":["Fetch.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/all/day';\nconst API_KEY = 'ff752eca5c4aa6fb3d3aed4452b80b84';\n\nexport async function getTrendingFilms(controller) {\n  const URL = `${BASE_URL}?api_key=${API_KEY}`;\n  const response = await axios.get(URL, { signal: controller.signal });\n  return response.data.results;\n}\n\nexport async function getSearchFilm(search, controller) {\n  const URL = `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  const data = await axios.get(URL, { signal: controller.signal });\n  return data.data.results;\n}\nexport async function getIdFilm(movie_id, controller) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL, { signal: controller.signal });\n  return data.data;\n}\n\nexport async function getIdFilmCredits(movie_id, controller) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL, { signal: controller.signal });\n  return data.data;\n}\n\nexport async function getIdFilmReviews(movie_id, controller) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const data = await axios.get(URL, { signal: controller.signal });\n  return data.data;\n}\n","import { getIdFilmCredits } from 'Fetch';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function getMovieIdCastAsync() {\n      setIsLoading(true);\n      try {\n        setError(null);\n        const data = await getIdFilmCredits(movieId, controller);\n        if (data.cast.length === 0) {\n          setCast(null);\n          return;\n        }\n        setCast(data);\n      } catch (error) {\n        if (error.response) {\n          setError(error);\n          toast.error(error.response.data.status_message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovieIdCastAsync();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {error && <h2>{error.response.data.status_message}</h2>}\n      {cast === null ? (\n        <p>Not Found Cast</p>\n      ) : (\n        <ul>\n          {cast.cast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path !== null\n                    ? `https://image.tmdb.org/t/p/original${profile_path}`\n                    : `https://thumbs.dreamstime.com/b/best-design-global-news-digital-illusration-71660044.jpg`\n                }\n                alt={name}\n                width=\"150\"\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","getTrendingFilms","controller","URL","axios","signal","response","data","results","getSearchFilm","search","getIdFilm","movie_id","getIdFilmCredits","getIdFilmReviews","movieId","useParams","useState","cast","setCast","error","setError","isLoading","setIsLoading","useEffect","AbortController","length","toast","status_message","getMovieIdCastAsync","abort","map","id","profile_path","name","character","src","alt","width"],"sourceRoot":""}