{"version":3,"file":"static/js/779.c9803930.chunk.js","mappings":"mTAEMA,EAAW,gDACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gFACCC,EADD,UACUJ,EADV,oBAC8BC,GAD9B,SAEkBI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFtD,cAECC,EAFD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,gFACCP,EADD,0DAC0DO,EAD1D,oBAC4EV,EAD5E,uDAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,KAAKC,SAHZ,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gFACCT,EADD,6CAC6CS,EAD7C,oBACiEZ,EADjE,4BAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gFACCT,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,4BAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,gFACCT,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,mCAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kE,wJC1BMQ,E,QAAcC,GAAAA,GAAH,8C,6BCoDxB,EA/CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,EAAS,MAFb,UAGuBT,EAAAA,EAAAA,IAAiBG,GAHxC,UAIgC,KADtBV,EAHV,QAIaC,QAAQmB,OAJrB,uBAKMN,EAAW,MALjB,0BAQIA,EAAWd,GARf,kDAUIgB,EAAS,EAAD,IACRK,EAAAA,GAAAA,MAAY,KAAMtB,SAASC,KAAKsB,gBAXpC,yBAaIJ,GAAa,GAbjB,8EADc,sBAiBdA,GAAa,GAjBE,WAAD,wBAkBdK,EACD,GAAE,CAACb,KAEF,iCACE,SAACc,EAAA,EAAD,CAAQP,UAAWA,IAClBF,IAAS,wBAAKA,EAAMhB,SAASC,KAAKsB,iBACtB,OAAZT,GACC,8CAEA,SAACL,EAAD,UACGK,EAAQZ,QAAQwB,KAAI,SAAAC,GAAM,OACzB,2BACE,uCACCA,EAAOC,QACR,uBAAID,EAAOE,YAHJF,EAAOG,GADS,QAWpC,C","sources":["Fetch.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/all/day';\nconst API_KEY = 'ff752eca5c4aa6fb3d3aed4452b80b84';\n\nexport async function getTrendingFilms(controller) {\n  const URL = `${BASE_URL}?api_key=${API_KEY}`;\n  const response = await axios.get(URL, { signal: controller.signal });\n  return response.data.results;\n}\n\nexport async function getSearchFilm(search) {\n  const URL = `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  const data = await axios.get(URL);\n  return data.data.results;\n}\nexport async function getIdFilm(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n\nexport async function getIdFilmCredits(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n\nexport async function getIdFilmReviews(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n","import styled from 'styled-components';\n\nexport const ListReviews = styled.ul`\n  padding: 0 20px; ;\n`;\n","import { getIdFilmReviews } from 'Fetch';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ListReviews } from './Reviews.styled';\nimport { toast } from 'react-hot-toast';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        setError(null);\n        const data = await getIdFilmReviews(movieId);\n        if (data.results.length === 0) {\n          setReviews(null);\n          return;\n        }\n        setReviews(data);\n      } catch (error) {\n        setError(error);\n        toast.error(error.response.data.status_message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    setIsLoading(true);\n    getReviews();\n  }, [movieId]);\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {error && <h2>{error.response.data.status_message}</h2>}\n      {reviews === null ? (\n        <p>Not Found Reviews</p>\n      ) : (\n        <ListReviews>\n          {reviews.results.map(review => (\n            <li key={review.id}>\n              <span>Author: </span>\n              {review.author}\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ListReviews>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","getTrendingFilms","controller","URL","axios","signal","response","data","results","getSearchFilm","search","getIdFilm","movie_id","getIdFilmCredits","getIdFilmReviews","ListReviews","styled","movieId","useParams","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useEffect","length","toast","status_message","getReviews","Loader","map","review","author","content","id"],"sourceRoot":""}