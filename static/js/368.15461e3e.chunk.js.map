{"version":3,"file":"static/js/368.15461e3e.chunk.js","mappings":"mTAEMA,EAAW,gDACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gFACCC,EADD,UACUJ,EADV,oBAC8BC,GAD9B,SAEkBI,EAAAA,EAAAA,IAAUD,EAAK,CAAEE,OAAQH,EAAWG,SAFtD,cAECC,EAFD,yBAGEA,EAASC,KAAKC,SAHhB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,gFACCP,EADD,0DAC0DO,EAD1D,oBAC4EV,EAD5E,uDAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,KAAKC,SAHZ,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gFACCT,EADD,6CAC6CS,EAD7C,oBACiEZ,EADjE,4BAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gFACCT,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,4BAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kEAMA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,gFACCT,EADD,6CAC6CS,EAD7C,4BACyEZ,EADzE,mCAEcI,EAAAA,EAAAA,IAAUD,GAFxB,cAECI,EAFD,yBAGEA,EAAKA,MAHP,kE,0FC1BMQ,E,QAAOC,GAAAA,GAAH,wC,SCEJC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACL,EAAD,WACE,SAAC,KAAD,CAAMM,GAAE,kBAAaH,EAAKI,IAAMC,MAAO,CAAEC,KAAML,GAA/C,SACGD,EAAKO,OAASP,EAAKQ,UAK7B,C,wJC0CD,UAjDmB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KA6BA,OA3BAC,EAAAA,EAAAA,YAAU,WACR,GAAmB,KAAfR,GAGAA,EAAY,CAAC,IACAS,EADD,mCACd,2FACEF,EAAS,MADX,mBAGuBzB,EAAAA,EAAAA,IAAckB,GAHrC,UAIwB,KADdpB,EAHV,QAIa8B,OAJb,uBAKMP,EAAa,MALnB,kBAMaQ,EAAAA,GAAAA,MACL,4EAPR,OAUIR,GAAa,OAAIvB,IAVrB,kDAYI2B,EAAS,EAAD,IACRI,EAAAA,GAAAA,MAAY,KAAMhC,SAASC,KAAKgC,gBAbpC,yBAeIP,GAAa,GAfjB,6EADc,qDAmBdA,GAAa,GACbI,GACD,CACF,GAAE,CAACT,KAEF,gCACE,SAAC,IAAD,CAAQI,UAAWA,IAClBE,IAAS,wBAAKA,EAAM3B,SAASC,KAAKgC,iBAClCV,IACC,+BACE,SAAC,EAAAW,EAAD,UACGX,EAAUY,KAAI,SAAAvB,GAAI,OACjB,SAAC,IAAD,CAAwBA,KAAMA,GAAfA,EAAKI,GADH,UAQ9B,C,yGCrDYoB,EAAgB1B,EAAAA,GAAAA,GAAH,sEAIb2B,EAAW3B,EAAAA,GAAAA,GAAH,iF","sources":["Fetch.js","components/ItemFilm/ItemFilm.styled.js","components/ItemFilm/ItemFilm.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/all/day';\nconst API_KEY = 'ff752eca5c4aa6fb3d3aed4452b80b84';\n\nexport async function getTrendingFilms(controller) {\n  const URL = `${BASE_URL}?api_key=${API_KEY}`;\n  const response = await axios.get(URL, { signal: controller.signal });\n  return response.data.results;\n}\n\nexport async function getSearchFilm(search) {\n  const URL = `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  const data = await axios.get(URL);\n  return data.data.results;\n}\nexport async function getIdFilm(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n\nexport async function getIdFilmCredits(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n\nexport async function getIdFilmReviews(movie_id) {\n  const URL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const data = await axios.get(URL);\n  return data.data;\n}\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  width: 100%;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Item } from './ItemFilm.styled';\nimport PropTypes from 'prop-types';\n\nexport const ItemFilm = ({ film }) => {\n  const location = useLocation();\n  return (\n    <>\n      <Item>\n        <Link to={`/movies/${film.id}`} state={{ from: location }}>\n          {film.title || film.name}\n        </Link>\n      </Item>\n    </>\n  );\n};\n\nItemFilm.propTypes = {\n  film: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n","import { getSearchFilm } from 'Fetch';\nimport { ItemFilm } from 'components/ItemFilm/ItemFilm';\nimport { CardList } from 'pages/Home/Home.styled';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { Loader } from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ searchText }) => {\n  const [listFilms, setListFilms] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (searchText === '') {\n      return;\n    }\n    if (searchText) {\n      async function getMoviesList() {\n        setError(null);\n        try {\n          const data = await getSearchFilm(searchText);\n          if (data.length === 0) {\n            setListFilms(null);\n            return toast.error(\n              'Sorry, there are no films matching your search query. Please try again.'\n            );\n          }\n          setListFilms([...data]);\n        } catch (error) {\n          setError(error);\n          toast.error(error.response.data.status_message);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n      setIsLoading(true);\n      getMoviesList();\n    }\n  }, [searchText]);\n  return (\n    <section>\n      <Loader isLoading={isLoading} />\n      {error && <h2>{error.response.data.status_message}</h2>}\n      {listFilms && (\n        <>\n          <CardList>\n            {listFilms.map(film => (\n              <ItemFilm key={film.id} film={film}></ItemFilm>\n            ))}\n          </CardList>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  searchText: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const TitleTrending = styled.h1`\n  margin-left: 20px;\n  margin-bottom: 10px;\n`;\nexport const CardList = styled.ul`\n  display: flex;\n  gap: 5px;\n  flex-direction: column;\n`;\n"],"names":["BASE_URL","API_KEY","getTrendingFilms","controller","URL","axios","signal","response","data","results","getSearchFilm","search","getIdFilm","movie_id","getIdFilmCredits","getIdFilmReviews","Item","styled","ItemFilm","film","location","useLocation","to","id","state","from","title","name","searchText","useState","listFilms","setListFilms","isLoading","setIsLoading","error","setError","useEffect","getMoviesList","length","toast","status_message","C","map","TitleTrending","CardList"],"sourceRoot":""}